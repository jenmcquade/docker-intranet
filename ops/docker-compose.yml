version: '3'

services:

  firewall:
    env_file:
      - ./.env
    image: ${DOCKER_ACCT}/intranet_firewall:${PROC_TYPE}-v${IWC_INTRANET_VERSION}
    build:
      context: ./docker-firewall
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    restart: unless-stopped
    container_name: firewall
    cap_add:
      - NET_ADMIN
    network_mode: host
    environment:
      - FW_SERVICE=${FW_SERVICE}
      - FW_PROTO=${FW_PROTO}
      - FW_PORTS=${FW_PORTS}
      - FW_STATIC=${FW_STATIC}

  cadvisor:
    env_file:
      - ./.env
    image: ${DOCKER_ACCT}/cadvisor:${PROC_TYPE}
    container_name: cadvisor
    build:
      context: docker-cadvisor
    volumes:
      - /:/rootfs:ro 
      - /var/run:/var/run:ro 
      - /sys:/sys:ro 
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - 8181:8080
    networks:
      - home
      - ops

  portainer:
    env_file:
      - ./.env
    image: ${DOCKER_ACCT}/portainer:${PROC_TYPE}
    build: 
      context: portainer
    restart: unless-stopped
    ports:
      - 8585:9000
    container_name: portainer
    command: --templates http://templates/templates.json
    networks:
      - home
      - ops
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/data
    labels:
      com.iwc.type: "ui"
      com.iwc.description: "Docker services manager frontend"
      com.iwc.stack: "Alpine, Portainer console"

  templates:
    image: ${DOCKER_ACCT}/portainer-templates:${PROC_TYPE}
    container_name: "templates"
    build:
      context: portainer
      dockerfile: Dockerfile_Templates
    networks:
      - home
      - ops
    labels:
      com.iwc.type: "ops"
      com.iwc.description: "Templates for managine Portainer"

  watchtower:
    env_file:
      - ./.env
    image: ${DOCKER_ACCT}/watchtower:${PROC_TYPE}
    build:
      context: portainer
      dockerfile: Dockerfile_Watchtower
      args:
        buildtype: latest
    container_name: "watchtower"
    command: --cleanup portainer watchtower templates
    environment:
      - BUILD_TYPE=`if [ ${PROC_TYPE} = "arm64" ]; then echo "armhf-"; else echo ""; fi`
    networks:
      - home
      - ops
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      com.iwc.type: "ops"
      com.iwc.description: "updates docker containers dynamically with Portainer"  

  aws-cli:
    env_file:
     - ./.env
    image: ${DOCKER_ACCT}/aws-cli:${PROC_TYPE}-v${IWC_INTRANET_VERSION}
    build:
      context: aws
    container_name: "aws-cli"
    environment:
      - CLI_VERSION=1.16.138
    networks:
      - ops
    volumes:
      - ./auth:/root/.aws
      - ./util:/intranet/util
    labels:
      com.iwc.type: "ops"
      com.iwc.description: "Run AWS CLI commands that the ./auth user has access to run."
      com.iwc.example: "sudo docker exec aws-cli aws s3 ls"
  
  ssl:
    env_file:
      - ./.env
    image: ${DOCKER_ACCT}/ssl-tools:${PROC_TYPE}-v${IWC_INTRANET_VERSION}
    build:
      context: docker-ssl/src
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - COUNRY=${COUNTRY}
      - STATE=${STATE}
      - LOCATION=${LOCATION}
      - ORGANIZATION=${ORGANIZATION}
      - ROOT_CN=${ROOT_CN}
      - ISSUER_CN=${ISSUER_CN}
      - PUBLIC_CN=${PUBLIC_CN}
      - ROOT_NAME=${ROOT_NAME}
      - ISSUER_NAME=${ISSUER_NAME}
      - PUBLIC_NAME=${PUBLIC_NAME}
      - RSA_KEY_NUMBITS=${RSA_KEY_NUMBITS}
      - DAYS=${DAYS}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEYSTORE_PASS=${KEYSTORE_PASS}
    container_name: ssl
    networks:
      - ops
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./certs:${CERT_DIR}
      - ./util:/intranet/util
    ports:
      - 6060:80
      - 6443:443
    labels:
      com.iwc.type: "ops"
      com.iwc.description: "Certbot and openssl for managing letsencrypt public and local SSL certs"
      com.iwc.example: "`sudo docker exec ssl /scripts/run_certbot.sh` OR `sudo docker -e ISSUER_CN=[yourdomain] exec ssl /scripts/openssl.sh` or/also use $ISSUER_CN in .env to set the domain for your self-signed cert"
      com.iwc.notes.1: ".env is used to generate a wildcard for a local domain on container creation"
      com.iwc.notes.2: "Certbot and symlinks are configured to write to ./certs for public certs"
      com.iwc.notes.3: "Certbot gets its domains by using [domain].conf rules in ./config/nginx"
      com.iwc.notes.4: "This service is proxied behind aphex (see root docker-compose.yml)"

  redis:
    env_file:
      - ./.env 
    image: ${DOCKER_ACCT}/redis:${PROC_TYPE}-5.0
    build:
      context: docker-redis/5.0/alpine
    container_name: redis
    networks:
      - ops
    volumes:
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./util:/intranet/util
    labels:
      com.iwc.type: "cache"
      com.iwc.description: "Save script output to memory instead of having to run them again"

  registry:
    env_file:
      - ./.env
    image: registry:2
    container_name: registry
    ports:
      - 5000:443
    restart: always
    volumes:
      - ./docker-registry:/var/lib/registry
      - ./certs:/certs
    environment:
      - "REGISTRY_HTTP_ADDR=${REGISTRY_HTTP_ADDR}"
      - "REGISTRY_HTTP_TLS_CERTIFICATE=${REGISTRY_HTTP_ADDR}"
      - "REGISTRY_HTTP_TLS_KEY=${REGISTRY_HTTP_TLS_KEY}"
    
networks:
  ops:
    driver: bridge
  home:
    driver: bridge
